import numpy as np

#----------------------------------------------------------------------------
print("\nЗадание 1)")
common_elements = np.intersect1d(np.array([0, 10, 20, 40, 60]), np.array([10, 30, 40]))
print(common_elements)
#----------------------------------------------------------------------------
print("\nЗадание 2)")
arr = np.array([[1, 1], [2, 3], [2, 5]])
arr_unique = np.array(np.unique(arr))
print(arr_unique)
#----------------------------------------------------------------------------
print("\nЗадание 3)")
arr = np.array([10, 10, 20, 10, 20, 20, 20, 30, 30, 50, 40, 40])
unique_elements, counts = np.unique(arr, return_counts=True)
print(unique_elements, counts)
#----------------------------------------------------------------------------
print("\nЗадание 4)")
arr = np.array([1, 2, 3, 4])
arr_result = np.tile(arr, 3)
print(arr_result)
#----------------------------------------------------------------------------
print("\nЗадание 5)")
arr = np.array([[1, 2, 3],[np.nan, 0, np.nan],[6, 7, np.nan]])
clean_arr = arr[~np.isnan(arr)]
print(clean_arr)
#----------------------------------------------------------------------------
print("\nЗадание 6)")
arr = np.array([1., 7., 8., 2., 0.1, 3., 15., 2.5])
k = 4
sorted_arr = np.sort(arr)
print(sorted_arr[:k])
#----------------------------------------------------------------------------
print("\nЗадание 7)")
arr = np.array([0.5, 1.8, 2.1, 3.5, 4.87, 5.13, 6.49])
target = 3.09066280756759
differences = np.abs(arr - target)
nearest_index = np.argmin(differences)
nearest_value = arr[nearest_index]
print(nearest_value)
#----------------------------------------------------------------------------
print("\nЗадание 8)")
arr1 = np.array(['Python', 'PHP'])
arr2 = np.array(['Java', 'C ++'])
# Поэлементное объединение строк с пробелом
result = np.char.add(np.char.add(arr1, ' '), arr2)
print(result)
#----------------------------------------------------------------------------
print("\nЗадание 9)")
arr = np.array(['Python', 'PHP', 'JS', ' examples', 'html'])
count_P = np.char.count(arr, 'P')
print(count_P)
#----------------------------------------------------------------------------
print("\nЗадание 10)")
coeffs_a = [1, -4, 7]
coeffs_b = [1, -11, 9, 11, -10]
roots_a = np.roots(coeffs_a)
roots_b = np.roots(coeffs_b)
print("Корни полинома x^2 - 4x + 7: ", roots_a)
print("Корни полинома x^4 - 11x^3 + 9x^2 + 11x - 10: ", roots_b)
#----------------------------------------------------------------------------
"""
Напишите следующие программы, используя только подходящие функции модуля
NumPy:

1. Дано два массива. Получите массив, состоящий из их общих элементов.
Например, для массивов [0 10 20 40 60] и [10 30 40] ответом будет [10, 40].

2. Дан массив. Получите массив его уникальных элементов.
Исходный массив: [10 10 20 20 30 30]
Массив его уникальных элементов: [10 20 30]
Исходный массив:
[[1 1]
[2 3]]
Массив его уникальных элементов: [1 2 3]

3. Дан массив. Получите два массива: его уникальные элементы и их частоты.
Исходный массив: [10 10 20 10 20 20 20 30 30 50 40 40]
Два массива: [10 20 30 40 50], [3 4 2 2 1]

4. Дан массив. Получите массив путем повторения данного.
Образец массива: [1, 2, 3, 4]
Ожидаемый результат:
1 повторение
[1, 2, 3, 4]
2 повторения
[1, 2, 3, 4, 1, 2, 3, 4]
3 повторения
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]

5. Дан массив, в котором имеются значения nan. Получите массив, удалив все значения
nan.
Исходный массив: [200. 300. nan nan nan 700.]
После удаления значений nan: [200. 300. 700.]
Исходный массив:
[[1. 2. 3.]
[nan 0. nan]
[6. 7. nan]]
После удаления значений nan: [1. 2. 3. 0. 6. 7.]

6. Дан массив. Получите массив его k наименьших значений.
Оригинальный массив: [1. 7. 8. 2. 0.1 3. 15. 2.5]
Его 4 наименьших значения: [0.1 1. 2. 2.5]

7. Дан массив и некоторое число. Найдите ближайший по значению к числу элемент
массива.
Исходный массив: [0.5 1.8 2.1 3.5 4.87 5.13 6.49]
Значение для сравнения: 3,09066280756759
Ответ: 3.5

8. Дано два массива со строками. Получите массив при помощи поэлементного
объединения.
1 массив: ['Python' 'PHP']
2 массив: ['Java' 'C ++']
Результат: ['Python Java' 'PHP C ++']

9. Дан массив строк. Получите массив с частотой встречаемости буквы «P».
Оригинальный массив: ['Python' 'PHP' 'JS' ' examples' 'html']
Количество 'P': [1 2 0 0 0]

10. Найдите корни следующих полиномов:
a. x^2 - 4х + 7
b. x^4 - 11х^3 + 9х^2 + 11х - 10
"""